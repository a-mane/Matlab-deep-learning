function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Dec-2018 10:52:31.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.
load('I.mat'); x1=I;
%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1;1];
x1_step1.gain = [1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [6.2172702050283543684;-5.6230907847530779975;4.9561796096525476685;4.2346223074908300177;3.8486494863977540604;2.5253441900390165564;-2.3289733925370423862;-1.8291029158548939293;0.94955836900647672127;-0.34288858100658414774;0.55535984662013115898;0.88617908039478909821;-1.6606264620740924798;2.3058552809303813902;3.1528142447498761491;-3.610036140622029599;4.3863962203014583707;4.8400123255395453015;-5.5708228551880845103;-6.2790981556881346748];
IW1_1 = [-5.227498228189398688 3.5062743337702282354;0.069344237938595940096 6.2373190475743163219;-5.9142757241477328378 -2.0413651591885635384;-1.2537370288537255103 6.1706549039311147098;-3.9236423872957630898 -4.6864119107885722215;-3.4238872728572995463 -5.4656007346622272891;4.37913316309704026 -4.4494498937046742526;5.3246949836526189515 -3.160273863060660382;-4.3164440566975645908 4.5226356918865358026;5.6937436286715170652 2.6091028305194341463;6.2115205619297961803 0.6416262599443883774;4.0935243678113568677 4.7328561057312441562;-1.2826808812644545643 -6.1273606815237382506;0.2896904600937105223 -6.2538232560281317163;3.6135134092739433775 -4.968948663512974484;-0.43631800277420801359 6.2583319943452613288;4.6623676661256636677 -4.0635051960915795632;5.130930882081190525 3.714147029513243492;-3.8201089457714205722 4.9852195974532271805;-3.3901226852380048626 -5.238132048493322479];

% Layer 2
b2 = [0.60007549605370169576;0.60815836637043274582;0.19503899065792890122];
LW2_1 = [-0.47642505988890976321 0.52816028318201257985 -0.32385297361420734008 0.49019673057702667363 0.2195071684771301157 -0.02246710634625056352 -0.44971035949323800995 -0.35736387333703195646 -0.93840960807481066386 -0.46544214321396298883 0.61016203538538293927 -0.4581176817652026223 -0.3493450776170970995 0.23543054780864419717 -0.40094918238675852917 0.66271913228175993726 -0.054300541637063312606 0.13980170701077118678 -0.34907669665211388255 0.37323734531559527028;-0.0089951794091259491132 -0.015030815750496959171 -0.039942177371787221385 0.18412219350079067626 -0.81036907893816390036 0.62190017383609119683 0.31906446447222169827 -0.0010687222944277300577 -0.12875756132600726933 -0.40935958719558468433 0.20460026673958911503 0.54849775284142909815 -0.24192724467247689324 0.70507455754114700675 0.05739179164172622527 1.1093865098243322898 0.072967553143788846381 -0.33781991243051934237 0.35169050804914331332 -0.010620855172779679679;-0.34762509507022848476 -0.074492028671176310772 -0.16336181458208065553 0.36302304697956710999 -0.48751204156194072326 -0.58125652476292866133 -0.6203325632530845013 -0.030822147058578115708 -0.41009300406550797113 -1.1619938297282657036 0.27047763107421540774 0.7927407133595573141 0.77349134918046458242 0.89503064925079078851 -0.23729992402783267602 0.60901984535759390305 0.6506259813311734419 -0.34184423359743854043 0.97681876149309454505 -0.72730731850953178608];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.274461369562234;0.0362930299236032;0.025];
y1_step1.xoffset = [3.883;38.2;65];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
